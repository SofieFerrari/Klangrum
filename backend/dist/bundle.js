(()=>{"use strict";const e=require("express"),s=require("cors"),t=require("mongoose"),r=require("fs"),a=require("path"),n=(require("express-list-endpoints"),require("dotenv")),o=require("bcrypt"),{Schema:i,model:c}=t,u=c("User",new i({userName:{type:String,required:!0,unique:!0,lowercase:!0},password:{type:String,required:!0,minlength:8,validate:[{validator:e=>/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).+$/.test(e),message:"Password must contain at least one uppercase letter, one lowercase letter, and a number"}]},accessToken:{type:String,default:()=>o.genSaltSync()}})),l=e.Router();l.post("/register",(async(e,s)=>{try{const{userName:t,password:r}=e.body;if(!t)return s.status(400).json({message:"Please choose a username."});if(!r)return s.status(400).json({message:"Please choose a password"});if(r.length<8)return s.status(400).json({message:"Password must be at least 8 characters long."});const a=new u({userName:t,password:o.hashSync(r,10)});await a.save(),s.status(201).json({message:`The registration was successful ${a.userName}. You are welcome to log in.`,id:a._id,accessToken:a.accessToken})}catch(e){console.error("Register Endpoint",e),s.status(400).json({message:"Could not register user."})}})),l.post("/login",(async(e,s)=>{try{const{userName:t,password:r}=e.body,a=await u.findOne({userName:t});a?await o.compare(r,a.password)?s.status(200).json({message:`Welcome ${a.userName}.`,id:a._id,accessToken:a.accessToken}):s.status(401).json({message:"Incorrect password, please try again."}):s.status(404).json({message:"Could not find an account with this userName, please try again"})}catch(e){console.error("Login Endpoint",e),s.status(500).json({message:"Login failed"})}})),l.get("/all",(async(e,s)=>{try{const e=await u.find({}).exec();e.length>0?s.status(200).json({users:e,message:"Success in retrieving all users."}):s.status(404).json({message:"No users found."})}catch(e){console.error("Get all users endpoint:",e),s.status(500).json({message:"Sorry, we couldn't retrieve users at this time. Please try again later."})}}));const d=l,{Schema:g,model:m}=t,p=m("Illustration",new g({name:{type:String,required:!0},image:{type:String,required:!0},technique:{type:String,required:!0}})),{Schema:y,model:w}=t,S=w("Event",new y({name:{type:String,required:!0},date:{type:String,required:!0},about:{type:String,required:!0}})),{Schema:h,model:q}=t,f=q("Architecture",new h({name:{type:String,required:!0},image:{type:String,required:!0},about:{type:String,required:!0}}));n.config();const j=e(),v=process.env.PORT||8080;j.use(s()),j.use(e.json()),j.use("/users",d);const N=process.env.MONGO_URL||"mongodb://localhost/klangrum";t.connect(N).then((()=>{console.log("Connected to MongoDB")})).catch((e=>{console.error("Error connecting to MongoDB:",e)})),t.Promise=Promise;const b=JSON.parse(r.readFileSync(a.resolve("data/Illustrations.json"),"utf8")),M=JSON.parse(r.readFileSync(a.resolve("data/EventData.json"),"utf8")),E=JSON.parse(r.readFileSync(a.resolve("data/ArchitectureData.json"),"utf8"));process.env.RESET_DB&&(async()=>{try{await p.deleteMany(),await S.deleteMany(),await f.deleteMany(),await p.insertMany(b),await S.insertMany(M),await f.insertMany(E),console.log("Database seeded successfully")}catch(e){console.error("Error seeding database:",e)}})(),j.listen(v,(()=>{console.log(`Servern kör på port ${v}`)}))})();